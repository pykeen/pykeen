# See https://setuptools.readthedocs.io/en/latest/build_meta.html
[build-system]
requires = ["setuptools", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "pykeen"
version = "1.10.3-dev"
description = "A package for training and evaluating multimodal knowledge graph embeddings"
readme = "README.md"
authors = [
    { name = "Mehdi Ali", email = "pykeen2019@gmail.com" },
    { name = "Max Berrendorf", email = "max.berrendorf@gmail.com" },
    { name = "Laurent Vermue", email = "pykeen2019@gmail.com" },
    { name = "Charles Tapley Hoyt", email = "cthoyt@gmail.com" },
]
maintainers = [
    { name = "Max Berrendorf", email = "max.berrendorf@gmail.com" },
    { name = "Charles Tapley Hoyt", email = "cthoyt@gmail.com" },
]

# See https://packaging.python.org/en/latest/guides/writing-pyproject-toml/#classifiers
# Search tags using the controlled vocabulary at https://pypi.org/classifiers
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Environment :: Console",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Framework :: Pytest",
    "Framework :: tox",
    "Framework :: Sphinx",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3 :: Only",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Scientific/Engineering :: Chemistry",
    "Topic :: Scientific/Engineering :: Bio-Informatics",
    "Topic :: Scientific/Engineering :: Mathematics",
    "Topic :: Scientific/Engineering :: Information Analysis",
]
keywords = [
    "snekpack", # please keep this keyword to credit the cookiecutter-snekpack template
    "cookiecutter",
    "Knowledge Graph Embeddings",
    "Machine Learning",
    "Data Mining",
    "Linked Data",
]

# License Information. This can be any valid SPDX identifiers that can be resolved
# with URLs like https://spdx.org/licenses/MIT
# See https://packaging.python.org/en/latest/guides/writing-pyproject-toml/#license
license = { file = "LICENSE" }

requires-python = ">=3.9"
dependencies = [
    "dataclasses-json",
    "numpy",
    "numpy",
    "scipy>=1.7.0",
    "click",
    "click_default_group",
    "scikit-learn",
    "torch>=2.0",
    "tqdm",
    "requests",
    "optuna>=2.0.0",
    "pandas>=1.0.0",
    "tabulate",
    "more_click",
    "more_itertools",
    "pystow>=0.4.3",
    "docdata",
    "class_resolver>=0.5.1",
    "pyyaml",
    "torch_max_mem>=0.1.1",
    "torch-ppr>=0.0.7",
    "typing_extensions",
]

[project.optional-dependencies]
templating = [
    "jinja2",
]
plotting = [
    "matplotlib",
    "seaborn",
]
wordcloud = [
    "wordcloud",
    "IPython",
]
opt_einsum = [
    "opt_einsum",
]
mlflow = [
    "mlflow>=1.8.0",
]
ogb = [
    "ogb>=1.3.4",
]
wandb = [
    "wandb", ]
neptune = [
    "neptune-client",
]
tensorboard = [
    "tensorboard",
]
transformers = [
    "transformers",
]
lightning = [
    # cf. https://github.com/Lightning-AI/lightning/pull/14117
    "pytorch_lightning>=1.7.2",
]
biomedicine = [
    "bioregistry",
    "pyobo>=0.8.7",
]
tests = [
    "unittest-templates>=0.0.5",
    "coverage",
    "pytest",
]
docs = [
    "sphinx>=8.0",
    "sphinx-rtd-theme>=3.0",
    "sphinx-click",
    "sphinx_automodapi",
    "texext",
    "graphviz",
]
pyg = [
    # from 2.3 onwards, you can install this without pre-compiled dependencies
    # for training, you may still want to have those, cf. https://github.com/pyg-team/pytorch_geometric?tab=readme-ov-file#pypi
    "torch_geometric",
]

# See https://packaging.python.org/en/latest/guides/writing-pyproject-toml/#urls
[project.urls]
"Bug Tracker" = "https://github.com/pykeen/pykeen/issues"
Homepage = "https://github.com/pykeen/pykeen"
Repository = "https://github.com/pykeen/pykeen.git"
Documentation = "https://pykeen.readthedocs.io"

[tool.setuptools]
package-dir = { "" = "src" }

[tool.setuptools.packages.find]
# this implicitly sets `packages = ":find"`
where = ["src"]  # list of folders that contain the packages (["."] by default)

# See https://setuptools.pypa.io/en/latest/userguide/datafiles.html
[tool.setuptools.package-data]
"*" = ["*.*"]


[project.scripts]
pykeen = "pykeen.cli:main"

# You can add your own datasets with the following entrypoint
# pykeen.datasets =
#    hetionet         = pykeen.datasets.hetionet:Hetionet

[tool.cruft]
skip = [
    "**/__init__.py",
    "tests/*"
]

# MyPy, see https://mypy.readthedocs.io/en/stable/config_file.html
[tool.mypy]
plugins = [
]

# Doc8, see https://doc8.readthedocs.io/en/stable/readme.html#ini-file-usage
[tool.doc8]
max-line-length = 120
ignore-path-errors = [
    "docs/source/tutorial/inductive_lp.rst; D000",
    "docs/source/tutorial/understanding_evaluation.rst; D000",
    # TODO reinvestigate after upgrading to sphinx 7+
]

# Coverage, see https://coverage.readthedocs.io/en/latest/config.html
[tool.coverage.run]
branch = true
source = [
    "pykeen",
]
omit = [
    "tests/*",
    "docs/*",
    "src/pykeen/cli/*",
    "src/pykeen/__main__.py",
]

[tool.coverage.paths]
source = [
    "src/pykeen",
    ".tox/*/lib/python*/site-packages/pykeen",
]

[tool.coverage.report]
show_missing = true
exclude_lines = [
    "pragma: no cover",
    "raise NotImplementedError",
    "if __name__ == \"__main__\":",
    "if TYPE_CHECKING:",
    "def __str__",
    "def __repr__",
]

[tool.black]
line-length = 120
target-version = [
    "py39",
    "py310",
    "py311",
    "py312",
]

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 120

[tool.ruff]
line-length = 120
extend-include = ["*.ipynb"]

[tool.ruff.lint]
# See https://docs.astral.sh/ruff/rules
extend-select = [
    "F", # pyflakes
    "E", # pycodestyle errors
    "W", # pycodestyle warnings
    "C90", # mccabe
    "I", # isort
    "UP", # pyupgrade
    "D", # pydocstyle
    "B", # bugbear
    "S", # bandit
    "T20", # print
    "N", # pep8 naming
    # "ERA", # eradicate commented out code
    # "NPY", # numpy checks
    # "RUF", # ruff rules
]
ignore = [
    "D105", # Missing docstring in magic method
    "E203", # Black conflicts with the following
    "S101", # Asserts, TODO remove
    "D102", # Missing docstring in init TODO remove
]

# See https://docs.astral.sh/ruff/settings/#per-file-ignores
[tool.ruff.lint.per-file-ignores]
# Ignore commented out code in Sphinx configuration file
"docs/source/conf.py" = ["ERA001"]
"docs/source/examples/**/*.py" = [
    "E402",  # allow imports not at top for narrative purposes
    "T201",  # allow prints
]
"notebooks/**/*.ipynb" = ["T201"]

[tool.ruff.lint.pydocstyle]
convention = "pep257"

[tool.ruff.lint.isort]
known-third-party = ["tqdm"]
known-first-party = ["pykeen", "tests"]
relative-imports-order = "closest-to-furthest"

[tool.ruff.lint.mccabe]
# Flag errors (`C901`) whenever the complexity level exceeds 5.
max-complexity = 21

# Pytest, see https://docs.pytest.org/en/stable/reference/customize.html#pyproject-toml
[tool.pytest.ini_options]
addopts = "--strict-markers"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')"
]
