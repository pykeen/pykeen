# Tox (http://tox.testrun.org/) is a tool for running tests
# in multiple virtualenvs. This configuration file will run the
# test suite on all supported python versions. To use it, "pip install tox"
# and then run "tox" from this directory.

[tox]
envlist =
    # always keep coverage-clean first
    #coverage-clean
    # code linters/stylers
    manifest
    flake8
    darglint
    pyroma
    # documentation linters/checkers
    readme
    doc8
    docs
    # the actual tests
    doctests
    py
    integration
    # always keep coverage-report last
    #coverage-report

[testenv]
commands = coverage run -p -m pytest --durations=20 {posargs:tests} -m "not slow"
passenv =
    HOME
deps =
    coverage
    pytest
extras =
    mlflow
whitelist_externals =
    /bin/cat
    /bin/cp
    /bin/mkdir
    /usr/bin/cat
    /usr/bin/cp
    /usr/bin/mkdir
    /usr/bin/git
    /usr/local/bin/git

[testenv:integration]
commands = coverage run -p -m pytest --durations=20 {posargs:tests} -m slow
deps =
    coverage
    pytest
extras =
    mlflow

[testenv:doctests]
commands =
    # TODO make this automatic for all RST in a loop (but not using xargs since doctest uses multiprocessing)
    python -m doctest docs/source/tutorial/first_steps.rst
    python -m doctest docs/source/byo/data.rst
    python -m doctest docs/source/byo/interaction.rst
    python -m doctest docs/source/tutorial/making_predictions.rst
    xdoctest -m src/pykeen/utils.py
    # python -m doctest src/pykeen/pipeline
    # python -m doctest src/pykeen/hpo/__init__.py
deps =
    xdoctest

[testenv:coverage-clean]
deps = coverage
skip_install = true
commands = coverage erase

[testenv:manifest]
deps = check-manifest
skip_install = true
commands = check-manifest

[testenv:pre-commit]
skip_install = true
deps =
    pre-commit
commands = pre-commit run -a
usedevelop = true
description = Run the pre-commit tool

[testenv:flake8]
skip_install = true
deps =
    flake8
    flake8-bandit
    flake8-colors
    flake8-docstrings
    flake8-import-order
    flake8-bugbear
    flake8-commas
    flake8-broken-line
    pep8-naming
    pydocstyle
commands =
    flake8 src/pykeen/ tests/ setup.py
description = Run the flake8 tool with several plugins (bandit, docstrings, import order, pep8 naming).

[testenv:docstr-coverage]
skip_install = true
deps =
    docstr-coverage
commands =
    docstr-coverage --skip-private --skip-magic \
        src/pykeen/datasets/ \
        src/pykeen/models/predict.py \
        src/pykeen/utils.py \
        src/pykeen/datasets/ \
        src/pykeen/triples/utils.py \
        setup.py
description = Run the docstr-coverage tool to check documentation coverage

[testenv:darglint]
skip_install = true
deps =
    flake8
    flake8-colors
    darglint
commands =
    flake8 \
        src/pykeen/models/predict.py \
        src/pykeen/models/nbase.py \
        src/pykeen/utils.py \
        src/pykeen/datasets/ \
        src/pykeen/triples/utils.py \
        src/pykeen/pipeline/ \
        setup.py
description = Run the flake8 tool with darglint.

[testenv:comma]
skip_install = true
deps =
    add-trailing-comma
whitelist_externals =
    /bin/find
    /usr/bin/find
    /bin/bash
commands =
    add-trailing-comma --py36-plus $(find src/pykeen/ -name *.py)
description = Check all python files do not have mistaken trailing commas

[testenv:mypy]
deps = mypy
skip_install = true
commands = mypy --ignore-missing-imports \
    src/pykeen/datasets \
    src/pykeen/evaluation \
    src/pykeen/nn \
    src/pykeen/models \
    src/pykeen/hpo \
    src/pykeen/stoppers \
    src/pykeen/training \
    src/pykeen/sampling \
    src/pykeen/pipeline \
    src/pykeen/trackers \
    src/pykeen/triples \
    src/pykeen/constants.py \
    src/pykeen/losses.py \
    src/pykeen/optimizers \
    src/pykeen/regularizers.py \
    src/pykeen/typing.py \
    src/pykeen/utils.py \
    src/pykeen/version.py
description = Run the mypy tool to check static typing on the project.

[testenv:pyroma]
deps =
    pygments
    pyroma
skip_install = true
commands = pyroma --min=9 .
description = Run the pyroma tool to check the package friendliness of the project.

[testenv:readme]
commands = pykeen readme --check
usedevelop = true
extras =
    templating
description = Make sure readme has been updated properly

[testenv:doc8]
skip_install = true
deps =
    sphinx
    doc8
commands =
    doc8 docs/source/ CHANGELOG.rst
description = Run the doc8 tool to check the style of the RST files in the project docs.

[testenv:docs]
changedir = docs
extras =
    docs
commands =
    mkdir -p {envtmpdir}
    cp -r source {envtmpdir}/source
    sphinx-build -W -b html -d {envtmpdir}/build/doctrees {envtmpdir}/source {envtmpdir}/build/html
    sphinx-build -W -b coverage -d {envtmpdir}/build/doctrees {envtmpdir}/source {envtmpdir}/build/coverage
    cat {envtmpdir}/build/coverage/c.txt
    cat {envtmpdir}/build/coverage/python.txt

[testenv:coverage-report]
deps = coverage
skip_install = true
commands =
    coverage combine
    coverage report

####################
# Deployment tools #
####################

[testenv:bumpversion]
commands = bumpversion {posargs}
skip_install = true
passenv = HOME
deps =
    bumpversion

[testenv:build]
skip_install = true
deps =
    wheel
    setuptools
commands =
    python setup.py -q sdist bdist_wheel

[testenv:release]
skip_install = true
deps =
    {[testenv:build]deps}
    twine >= 1.5.0
commands =
    {[testenv:build]commands}
    twine upload --skip-existing dist/*

[testenv:finish]
skip_install = true
passenv = HOME
deps =
    {[testenv:release]deps}
    bumpversion
commands =
    bumpversion release
    {[testenv:release]commands}
    git push
    bumpversion patch
    git push
