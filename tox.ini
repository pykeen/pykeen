# Tox (http://tox.testrun.org/) is a tool for running tests
# in multiple virtualenvs. This configuration file will run the
# test suite on all supported python versions. To use it, "pip install tox"
# and then run "tox" from this directory.

[tox]
isolated_build = true
envlist =
    # always keep coverage-clean first
    #coverage-clean
    # code linters/stylers
    format
    manifest
    lint
    pyroma
    # documentation linters/checkers
    readme
    doc8
    docs-test
    # the actual tests
    doctests
    py
    integration
    treon
    # always keep coverage-report last
    #coverage-report

[testenv]
# ensure we use the CPU-only version of torch
setenv =
    PIP_EXTRA_INDEX_URL = https://download.pytorch.org/whl/cpu 
passenv =
    HOME
extras =
    matplotlib
    seaborn
    mlflow
    ogb
    opt_einsum
    tensorboard
    tests
    transformers
    lightning
    pyg
    # biomedicine  # pyobo is too slow without caching
allowlist_externals =
    /bin/cat
    /bin/cp
    /bin/mkdir
    /usr/bin/cat
    /usr/bin/cp
    /usr/bin/mkdir
    /usr/bin/git
    /usr/local/bin/git

[testenv:py]
commands = coverage run -p -m pytest --durations=20 {posargs:tests} -m 'not slow'
extras =
    mlflow
    tests

[testenv:integration]
commands = coverage run -p -m pytest --durations=20 {posargs:tests} -m slow
extras =
    mlflow
    tests

[testenv:doctests]
commands =
    # TODO make this automatic for all RST in a loop (but not using xargs since doctest uses multiprocessing)
    python -m doctest docs/source/tutorial/running_ablation.rst
    python -m doctest docs/source/tutorial/first_steps.rst
    python -m doctest docs/source/byo/data.rst
    python -m doctest docs/source/byo/interaction.rst
    xdoctest -m src/pykeen/utils.py
    xdoctest -m src/pykeen/pipeline/api.py
    # xdoctest -m src/pykeen/predict.py  # can't run because of migration guide
    # xdoctest -m src/pykeen/hpo/__init__.py
deps =
    xdoctest
    pygments

[testenv:coverage-clean]
deps = coverage
skip_install = true
commands = coverage erase

[testenv:manifest]
deps = check-manifest
skip_install = true
commands = check-manifest

[testenv:format]
deps =
    ruff
skip_install = true
commands =
    ruff check --fix
    ruff format
description = Format the code in a deterministic way using ruff

[testenv:doclint]
deps =
    rstfmt
skip_install = true
commands =
    rstfmt \
        docs/source/tutorial/node_piece.rst \
        docs/source/tutorial/troubleshooting.rst
description = Run documentation linters.

[testenv:lint]
skip_install = true
deps =
    ruff
    darglint2
commands =
    ruff format --check
    ruff check
    darglint2 --strictness short --docstring-style sphinx -v 2 src/ tests/ notebooks/ docs/source/examples
description = Check code quality using ruff and other tools. See https://github.com/akaihola/darglint2

[testenv:docstr-coverage]
skip_install = true
deps =
    docstr-coverage
commands =
    docstr-coverage --skip-private --skip-magic src/pykeen
description = Run the docstr-coverage tool to check documentation coverage

[testenv:mypy]
deps =
    mypy
    types-requests
    types-setuptools
    types-tabulate
    types-PyYAML
skip_install = true
commands = mypy --install-types --non-interactive --ignore-missing-imports src/ docs/source/examples
description = Run the mypy tool to check static typing on the project.

[testenv:pyroma]
deps =
    pygments
    pyroma
skip_install = true
commands = pyroma --min=9 .
description = Run the pyroma tool to check the package friendliness of the project.

[testenv:readme]
commands = pykeen readme --check
usedevelop = true
extras =
    templating
description = Make sure readme has been updated properly

[testenv:readme-build]
commands = pykeen readme
usedevelop = true
extras =
    templating
description = Make sure readme has been updated properly


[testenv:doc8]
skip_install = true
deps =
    sphinx
    doc8!=1.1.2 # 1.1.2 emits false positives for some references
commands =
    doc8 docs/source/ CHANGELOG.rst
description = Run the doc8 tool to check the style of the RST files in the project docs.

[testenv:docs-test]
description = Test building the documentation in an isolated environment.
changedir = docs
extras =
    docs
    lightning
commands =
    mkdir -p {envtmpdir}
    cp -r source {envtmpdir}/source
    python -m sphinx -W -b html     -d {envtmpdir}/build/doctrees {envtmpdir}/source {envtmpdir}/build/html
    python -m sphinx -W -b coverage -d {envtmpdir}/build/doctrees {envtmpdir}/source {envtmpdir}/build/coverage
    cat {envtmpdir}/build/coverage/c.txt
    cat {envtmpdir}/build/coverage/python.txt
allowlist_externals =
    /bin/cat
    /bin/cp
    /bin/mkdir
    /usr/bin/cat
    /usr/bin/cp
    /usr/bin/mkdir


[testenv:docs]
description = Build the documentation locally.
extras =
    {[testenv:docs-test]extras}
commands =
    python -m sphinx -W -b html -d docs/build/doctrees docs/source docs/build/html

[testenv:coverage-report]
deps = coverage
skip_install = true
commands =
    coverage combine
    coverage report

[testenv:treon]
deps =
    treon
extras = plotting
commands =
    treon notebooks
description = Run notebooks.

####################
# Deployment tools #
####################

[testenv:bumpversion]
description = Bump the version number
commands = bump-my-version bump {posargs}
skip_install = true
passenv = HOME
deps =
    bump-my-version

[testenv:bumpversion-release]
description = Remove the -dev tag from the version
commands = bump-my-version bump release --tag
skip_install = true
passenv = HOME
deps =
    bump-my-version

[testenv:build]
skip_install = true
deps =
    uv
    setuptools
commands =
    uv build --sdist --wheel --no-build-isolation

############
# Releases #
############

# In order to make a release to PyPI, you'll need to take the following steps:
#
# 1. Navigate to https://pypi.org/account/register/ to register for Test PyPI
# 2. Navigate to https://pypi.org/manage/account/ and request to re-send a verification email.
#    This is not sent by default, and is required to set up 2-Factor Authentication.
# 3. Get account recovery codes
# 4. Set up 2-Factor Authentication
# 5. Get an API token from https://pypi.org/manage/account/token/
# 6. Create a file called .pypirc in the home directory if it does not already exist.
# 7. Add the following content to the .pypirc file
#
#    [distutils]
#    index-servers=
#      pypi
#      testpypi
#
#    [pypi]
#    username = __token__
#    password = <the API token you just got>
#
#    If there's already an `index-servers =` list, just make sure you add `pypi` to it.
#    More information about .pypirc can be found at https://packaging.python.org/en/latest/specifications/pypirc/

[testenv:release]
description = Release the code to PyPI so users can pip install it
skip_install = true
passenv =
    TWINE_USERNAME
    TWINE_PASSWORD
deps =
    {[testenv:build]deps}
    twine >= 1.5.0
commands =
    {[testenv:build]commands}
    twine upload --skip-existing dist/*

[testenv:finish]
description =
    Run a workflow that removes -dev from the version, creates a tagged release on GitHub,
    creates a release on PyPI, and bumps the version again.
skip_install = true
passenv =
    HOME
    TWINE_USERNAME
    TWINE_PASSWORD
deps =
    {[testenv:release]deps}
    bump-my-version
commands =
    {[testenv:bumpversion-release]commands}
    {[testenv:release]commands}
    git push --tags
    bump-my-version bump patch
    git push
allowlist_externals =
    git

#################
# Test Releases #
#################

# In order to test making a release to Test PyPI, you'll need to take the following steps:
#
# 1. Navigate to https://test.pypi.org/account/register/ to register for Test PyPI
# 2. Navigate to https://test.pypi.org/manage/account/ and request to re-send a verification email.
#    This is not sent by default, and is required to set up 2-Factor Authentication.
# 3. Get account recovery codes
# 4. Set up 2-Factor Authentication
# 5. Get an API token from https://test.pypi.org/manage/account/token/
# 6. Create a file called .pypirc in the home directory if it does not already exist.
# 7. Add the following content to the .pypirc file
#
#    [distutils]
#    index-servers=
#      pypi
#      testpypi
#
#    [testpypi]
#    repository = https://test.pypi.org/legacy/
#    username = __token__
#    password = <the API token you just got>
#
#    If there's already an `index-servers =` list, just make sure you add `testpypi` to it.
#    More information about .pypirc can be found at https://packaging.python.org/en/latest/specifications/pypirc/

[testenv:testrelease]
description = Release the code to the test PyPI site
skip_install = true
passenv =
    TWINE_USERNAME
    TWINE_PASSWORD
deps =
    {[testenv:build]deps}
    twine >= 1.5.0
commands =
    {[testenv:build]commands}
    twine upload --skip-existing --repository testpypi dist/*

[testenv:testfinish]
description =
    Run a workflow that removes -dev from the version, creates a tagged release on GitHub,
    creates a release on Test PyPI, and bumps the version again.
skip_install = true
passenv =
    HOME
    TWINE_USERNAME
    TWINE_PASSWORD
deps =
    {[testenv:testrelease]deps}
    bump-my-version
commands =
    {[testenv:bumpversion-release]commands}
    {[testenv:testrelease]commands}
    git push --tags
    bump-my-version bump patch
    git push
allowlist_externals =
    git
