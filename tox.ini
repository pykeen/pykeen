# Tox (http://tox.testrun.org/) is a tool for running tests
# in multiple virtualenvs. This configuration file will run the
# test suite on all supported python versions. To use it, "pip install tox"
# and then run "tox" from this directory.

[tox]
isolated_build = true
envlist =
    # always keep coverage-clean first
    #coverage-clean
    # code linters/stylers
    lint
    manifest
    flake8
    pyroma
    # documentation linters/checkers
    readme
    doc8
    docs-test
    # the actual tests
    doctests
    py
    integration
    treon
    # always keep coverage-report last
    #coverage-report

[testenv]
commands =
    # custom installation for PyG, cf. https://github.com/rusty1s/pytorch_scatter/pull/268
    pip install torch-scatter torch-sparse torch-cluster torch-spline-conv torch-geometric --find-links https://data.pyg.org/whl/torch-2.0.0+cpu.html
    coverage run -p -m pytest --durations=20 {posargs:tests} -m "not slow"
# ensure we use the CPU-only version of torch
setenv =
    PIP_EXTRA_INDEX_URL = https://download.pytorch.org/whl/cpu 
passenv =
    HOME
extras =
    matplotlib
    seaborn
    mlflow
    ogb
    opt_einsum
    tensorboard
    tests
    transformers
    lightning
    # biomedicine  # pyobo is too slow without caching
allowlist_externals =
    /bin/cat
    /bin/cp
    /bin/mkdir
    /usr/bin/cat
    /usr/bin/cp
    /usr/bin/mkdir
    /usr/bin/git
    /usr/local/bin/git

[testenv:integration]
commands = coverage run -p -m pytest --durations=20 {posargs:tests} -m slow
extras =
    mlflow
    tests

[testenv:doctests]
commands =
    # TODO make this automatic for all RST in a loop (but not using xargs since doctest uses multiprocessing)
    python -m doctest docs/source/tutorial/running_ablation.rst
    python -m doctest docs/source/tutorial/first_steps.rst
    python -m doctest docs/source/byo/data.rst
    python -m doctest docs/source/byo/interaction.rst
    xdoctest -m src/pykeen/utils.py
    xdoctest -m src/pykeen/pipeline/api.py
    # xdoctest -m src/pykeen/predict.py  # can't run because of migration guide
    # xdoctest -m src/pykeen/hpo/__init__.py
deps =
    xdoctest
    pygments

[testenv:coverage-clean]
deps = coverage
skip_install = true
commands = coverage erase

[testenv:manifest]
deps = check-manifest
skip_install = true
commands = check-manifest

[testenv:lint]
deps =
    black[jupyter]
    isort
skip_install = true
commands =
    black src/ tests/ docs/ notebooks/
    isort src/ tests/ docs/ notebooks/
description = Run linters.

[testenv:doclint]
deps =
    rstfmt
skip_install = true
commands =
    rstfmt \
        docs/source/tutorial/node_piece.rst \
        docs/source/tutorial/troubleshooting.rst
description = Run documentation linters.

[testenv:flake8]
skip_install = true
deps =
    black
    darglint
    flake8<5.0.0
    # flake8-bandit
    flake8-black
    flake8-bugbear
    flake8-colors
    flake8-docstrings<1.6
    flake8-isort==5.0.0
    flake8-print
    pep8-naming
    pydocstyle
commands =
    flake8 src/pykeen/ tests/
description = Run the flake8 tool with several plugins (bandit, docstrings, import order, pep8 naming).

[testenv:docstr-coverage]
skip_install = true
deps =
    docstr-coverage
commands =
    docstr-coverage --skip-private --skip-magic src/pykeen
description = Run the docstr-coverage tool to check documentation coverage

[testenv:mypy]
deps =
    mypy
skip_install = true
commands = mypy --install-types --non-interactive --ignore-missing-imports src/pykeen
description = Run the mypy tool to check static typing on the project.

[testenv:pyroma]
deps =
    pygments
    pyroma
skip_install = true
commands = pyroma --min=9 .
description = Run the pyroma tool to check the package friendliness of the project.

[testenv:readme]
commands = pykeen readme --check
usedevelop = true
extras =
    templating
description = Make sure readme has been updated properly

[testenv:readme-build]
commands = pykeen readme
usedevelop = true
extras =
    templating
description = Make sure readme has been updated properly


[testenv:doc8]
skip_install = true
deps =
    sphinx
    doc8
commands =
    doc8 docs/source/ CHANGELOG.rst
description = Run the doc8 tool to check the style of the RST files in the project docs.

[testenv:docs-test]
description = Test building the documentation in an isolated environment.
changedir = docs
extras =
    docs
    lightning
commands =
    mkdir -p {envtmpdir}
    cp -r source {envtmpdir}/source
    python -m sphinx -W -b html     -d {envtmpdir}/build/doctrees {envtmpdir}/source {envtmpdir}/build/html
    python -m sphinx -W -b coverage -d {envtmpdir}/build/doctrees {envtmpdir}/source {envtmpdir}/build/coverage
    cat {envtmpdir}/build/coverage/c.txt
    cat {envtmpdir}/build/coverage/python.txt
allowlist_externals =
    /bin/cat
    /bin/cp
    /bin/mkdir
    /usr/bin/cat
    /usr/bin/cp
    /usr/bin/mkdir


[testenv:docs]
description = Build the documentation locally.
extras =
    {[testenv:docs-test]extras}
commands =
    python -m sphinx -W -b html -d docs/build/doctrees docs/source docs/build/html

[testenv:coverage-report]
deps = coverage
skip_install = true
commands =
    coverage combine
    coverage report

[testenv:treon]
deps =
    treon
extras = plotting
commands =
    treon notebooks
description = Run notebooks.

####################
# Deployment tools #
####################

[testenv:bumpversion]
commands = bumpversion {posargs}
skip_install = true
passenv = HOME
deps =
    bumpversion

[testenv:build]
skip_install = true
deps =
    wheel
    build
commands =
    python -m build --sdist --wheel --no-isolation

[testenv:release]
description = Release the code to PyPI so users can pip install it
skip_install = true
deps =
    {[testenv:build]deps}
    twine >= 1.5.0
commands =
    {[testenv:build]commands}
    twine upload --skip-existing dist/*

[testenv:testrelease]
description = Release the code to the test PyPI site
skip_install = true
deps =
    {[testenv:build]deps}
    twine >= 1.5.0
commands =
    {[testenv:build]commands}
    twine upload --skip-existing --repository-url https://test.pypi.org/simple/ dist/*

[testenv:finish]
skip_install = true
passenv =
    HOME
    TWINE_USERNAME
    TWINE_PASSWORD
deps =
    {[testenv:release]deps}
    bump2version
commands =
    bump2version release --tag
    {[testenv:release]commands}
    git push --tags
    bump2version patch
    git push
allowlist_externals =
    /usr/bin/git
